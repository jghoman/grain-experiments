// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

import List from "list"
import Map from "map"

let rec fibMemoized = (n, results) => {
    match(Map.get(n, results)) {
        Some(result) => result,
        None => {   
            if (n < 2) {
                n
            } else {
                let result = fibMemoized(n - 1, results) + fibMemoized(n - 2, results)
                Map.set(n, result, results)
                result
            }
        }

    }
}

let results = Map.make()
// An initWhile would be nice
let fibs = List.init(40, n => fibMemoized(n + 2, results))
let lessThan4M = List.takeWhile((n) => n < 4000000, fibs)
let evenValues = List.filter((n) => n % 2 == 0, lessThan4M)
let sum = List.sum(evenValues)

print(fibs)
print(lessThan4M)
print(evenValues)
print(sum)
